# -------------------------------------------
# Commands to run this compose file:
# - docker-compose -p microservices-comp3095 -f docker-compose.yml up -d
#   This command will start the containers in detached mode (-d) without rebuilding the images (if they already exist).
#
#  docker-compose -p comp3095-microservices-ecommerce -f docker-compose.yml up -d --build
#
# - docker-compose -f docker-compose.yml up -d --build
#   This command forces the rebuild of images, even if they already exist, before starting the containers.
# -------------------------------------------
version: '3.9'

services:
  # Zookeeper service to coordinate and manage Kafka brokers in the cluster.
  zookeeper:
    container_name: zookeeper
    hostname: zookeeper
    image: confluentinc/cp-zookeeper:7.5.0
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - spring

  # Kafka broker service for handling messaging and streaming data between microservices.
  broker:
    container_name: broker
    image: confluentinc/cp-kafka:7.5.0
    ports:
      # External connections (outside Docker) use 9092 and host.docker.internal (or the machine's external IP).
      - "9092:9092"
      # Internal connections (within Docker) use 29092 and the container hostname (broker).
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT, PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://host.docker.internal:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    networks:
      - spring

  # Kafka UI service for managing and monitoring Kafka topics, consumers, and brokers.
  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8086:8080"
    depends_on:
      - broker
    environment:
      KAFKA_CLUSTERS_NAME: local
      KAFKA_CLUSTERS_BOOTSTRAPSERVERS: broker:29092
      KAFKA_CLUSTERS_SCHEMAREGISTRY: http://schema-registry:8087
      DYNAMIC_CONFIG_ENABLED: 'true'
    networks:
      - spring

  # Week 7.2
  # Schema Registry service for managing Kafka topics' schemas.
  schema-registry:
    image: confluentinc/cp-schema-registry:7.5.0
    hostname: schema-registry
    container_name: schema-registry
    ports:
      - "8087:8081" # External port 8087 mapped to internal port 8081 to avoid conflict with mongo-express
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    depends_on:
      - broker
    networks:
      - spring

networks:
  spring:
    driver: bridge
