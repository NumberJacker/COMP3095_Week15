# docker-compose -f docker-compose.yml up -d
#
# docker-compose -f docker-compose.yml -p my_custom_project_name up -d
# For Example: docker-compose -f docker-compose.yml -p local up -d
#
# https://robert-askam.co.uk/posts/how-to-connect-mysql-workbench-to-running-mysql-inside-docker
# For docker to read and execute the mongo-init.js file, the database must NOT already exisit. 
# That is, the mongo-init.js file is only executed the one time, on newly initalized databases
version: '4.0'
services:
  mongodb:
    image: mongo:latest
    ports:
      - "27018:27017"
    #restart: always
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password      
    volumes:
      - ./docker-entrypoint-initdb.d/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
      - ./db-data:/data/db     
    container_name: local-mongodb
    #command: mongod --auth

  mongo-express:
    image: mongo-express
    #restart: always # fixes MongoNetworkError when mongodb is not ready when mongo-express starts
    ports:
      - "8081:8081"
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=admin
      - ME_CONFIG_MONGODB_ADMINPASSWORD=password
      - ME_CONFIG_MONGODB_SERVER=mongodb
    container_name: local-mongoexpress
    depends_on:
      - mongodb
      
#volumes:
#  mongo-data:
#    driver: local  