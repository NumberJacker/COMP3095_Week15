spring.application.name=order-service
order-service.version=v1.0

server.port=8082

# default is 5432 for postgres
# local-connections
spring.datasource.url=jdbc:postgresql://localhost:5433/order-service

# for container based connections
#spring.datasource.url=jdbc:postgresql://host.docker.internal:5431/order-service

spring.datasource.username=admin
spring.datasource.password=password
spring.datasource.driver-class-name=org.postgresql.Driver
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# none, validate, update, create, create-drop
# Options for controlling how Hibernate handles schema management
# none: No schema generation or validation is performed.
# none because we will be using flyaway
spring.jpa.hibernate.ddl-auto=none

# validate: Hibernate will validate the schema against the database without making any changes.
# This is useful to ensure that the database structure matches the entity mappings.
# Validation failure will throw an error.
#spring.jpa.hibernate.ddl-auto=validate

# update: Hibernate will modify the database schema to match the entity mappings.
# Only adds missing columns and tables, but does not remove anything.
# This is useful for iterative development but should be avoided in production.
#spring.jpa.hibernate.ddl-auto=update

# create: Hibernate will drop the existing schema and recreate it every time the application starts.
# This is useful during development but should not be used in production environments as it will
# erase all data on each startup.
#spring.jpa.hibernate.ddl-auto=create

# create-drop: Similar to "create", but in addition, it will drop the schema when the application stops.
# It's useful for integration tests where the schema only needs to exist for the duration of the app run.
#spring.jpa.hibernate.ddl-auto=create-drop

#Week 4.1
inventory.service.url=http://localhost:8083

# Week 5.2 - Swagger documentation location - ex. http://localhost:8082/swagger-ui
springdoc.swagger-ui.path=/swagger-ui
# Week 5.2 - Swagger documentation location - ex. http://localhost:8082/api-docs
springdoc.api-docs.path=/api-docs

# Week 6.2
management.health.circuitbreakers.enabled=true
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always

# Week 6.2
resilience4j.circuitbreaker.instances.inventory.registerHealthIndicator=true
resilience4j.circuitbreaker.instances.inventory.event-consumer-buffer-size=10
resilience4j.circuitbreaker.instances.inventory.slidingWindowType=COUNT_BASED
resilience4j.circuitbreaker.instances.inventory.slidingWindowSize=10
resilience4j.circuitbreaker.instances.inventory.failureRateThreshold=50
resilience4j.circuitbreaker.instances.inventory.waitDurationInOpenState=5s
resilience4j.circuitbreaker.instances.inventory.permittedNumberOfCallsInHalfOpenState=3
resilience4j.circuitbreaker.instances.inventory.automaticTransitionFromOpenToHalfOpenEnabled=true

resilience4j.timelimiter.instances.inventory.timeout-duration=3s
resilience4j.circuitbreaker.instances.inventory.minimum-number-of-calls=5

resilience4j.retry.instances.inventory.max-attempts=3
resilience4j.retry.instances.inventory.wait-duration=2s

# Kafka Producer Properties
# The address of the Kafka broker used to connect to the Kafka cluster.
spring.kafka.bootstrap-servers=localhost:9092
# The default topic where messages will be sent if not explicitly specified.
spring.kafka.template.default-topic=order-placed
# The serializer class used for serializing the key of the messages to Kafka.
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
# The serializer class used for serializing the value of the messages to Kafka in JSON format.
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
# Maps a custom event type to a specific class for deserialization of incoming JSON messages.
spring.kafka.producer.properties.spring.json.type.mapping=event:ca.gbc.orderservice.event.OrderPlacedEvent

